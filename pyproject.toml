[tool.poetry]
name = "app"
version = "0.1.0"
description = "Python Application with Best Practices"
authors = ["Your Name <your.email@example.com>"]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = ">=0.109.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
structlog = "^23.1.0"
prometheus-client = "^0.17.1"
opentelemetry-api = "^1.20.0"
opentelemetry-sdk = "^1.20.0"
opentelemetry-instrumentation-fastapi = "^0.41b0"
asyncpg = "^0.29.0"
redis = {extras = ["hiredis"], version = "^5.2.0"}
pydantic = "^2.4.2"
pydantic-settings = "^2.0.3"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = ">=0.0.7"
starlette = ">=0.40.0"
anyio = ">=4.4.0"
pyjwt = {extras = ["crypto"], version = "^2.9.0"}

[tool.poetry.group.dev.dependencies]
black = ">=23.10.1"
ruff = "^0.1.6"
isort = "^5.13.2"
mypy = "^1.7.0"
bandit = "^1.7.5"
bandit-sarif-formatter = "^1.1.1"
safety = "^2.3.5"
pre-commit = "^3.5.0"
types-redis = "^4.6.0.20240106"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
httpx = "^0.25.0"
aioresponses = "^0.7.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests"
]
addopts = """
    --verbose
    --strict-markers
    --cov=src/app
    --cov-report=html
    --cov-report=term-missing
    --no-cov-on-fail
"""

[tool.coverage.run]
source = ["src/app"]
omit = [
    "src/tests/*",
    "src/app/__pycache__/*",
    "src/app/monitoring/*",
    "src/app/*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError:",
    "raise Exception"
]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/tests/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
skip = ["tests"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C",   # flake8-comprehensions
    "UP"   # pyupgrade
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "tests",
    "src/tests"
]

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_optional = true

[[tool.mypy.overrides]]
module = "asyncpg.*"
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "src/tests", ".venv", "build", "dist"]
skips = ["B101", "B104"]  # Skip assert statements and hardcoded bind
targets = ["src"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*.py"]
