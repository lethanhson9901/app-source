# .github/workflows/devsecops-pipeline.yml
name: DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Daily security scans
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'
  DOCKER_REGISTRY: ghcr.io
  VERSION: ${{ github.event.release.tag_name || '1.0.0' }}
  IMAGE_NAME: ${{ github.repository }}
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  MIN_COVERAGE: 80
  MAX_TIMEOUT: 10m

permissions:
  contents: read
  security-events: write
  packages: write
  id-token: write
  checks: write

jobs:
  verify:
    name: Initial Verification
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Repository Checks
        id: check
        run: |
          # Check if required files exist
          for file in Dockerfile pyproject.toml README.md; do
            if [ ! -f "$file" ]; then
              echo "::error::Missing required file: $file"
              exit 1
            fi
          done

          # Check branch protections
          gh api repos/${{ github.repository }}/branches/main/protection \
            --jq '.required_status_checks.strict'

          echo "should_run=true" >> $GITHUB_OUTPUT

  security-gates:
    name: Security Gates
    needs: verify
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Pre-commit hooks
      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      # Secrets Scanning
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog-actions-scan@master
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

      # SAST with Semgrep
      - name: Semgrep Scan
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ secrets.SEMGREP_DEPLOYMENT_ID }}
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/python

      # License Compliance
      - name: FOSSA Analysis
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      # SBOM Generation
      - name: Generate SBOM
        uses: CycloneDX/gh-python-generate-sbom@v1
        with:
          input: poetry.lock
          output: bom.xml
          format: xml

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: bom.xml

  code-quality:
    name: Code Quality
    needs: security-gates
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      # Code Quality Checks
      - name: Run Code Quality Checks
        run: |
          mkdir -p reports

          poetry run black . --check --diff
          poetry run ruff check . --output-format=github
          poetry run mypy . --strict
          poetry run pylint src tests

      # Unit Tests & Coverage
      - name: Run Tests with Coverage
        run: |
          poetry run pytest \
            --junitxml=reports/junit.xml \
            --cov=src \
            --cov-report=xml:reports/coverage.xml \
            --cov-report=html:reports/htmlcov \
            --cov-fail-under=${{ env.MIN_COVERAGE }}

      # SonarQube Analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.python.coverage.reportPaths=reports/coverage.xml
            -Dsonar.python.xunit.reportPath=reports/junit.xml
            -Dsonar.python.pylint.reportPath=reports/pylint.txt

      # Upload Reports
      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: reports/

  security-scan:
    name: Security Scanning
    needs: code-quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Dependency Scanning
      - name: Run Safety Check
        run: |
          poetry run safety check --full-report --output json > reports/safety.json

      # Container Scanning
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          format: 'sarif'
          output: 'reports/trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      # Upload Security Reports
      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/trivy-results.sarif

      - name: Run Snyk Container Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          args: --file=Dockerfile

  performance:
    name: Performance Testing
    needs: security-scan
    runs-on: ubuntu-latest

    steps:
      # K6 Load Testing
      - name: Run k6 Load Test
        uses: grafana/k6-action@v0.3.0
        with:
          filename: performance/load-test.js
          flags: --out json=reports/k6-results.json

      # Artillery Load Testing
      - name: Run Artillery Test
        run: |
          npm install -g artillery
          artillery run scrips/performance/artillery-load.yml -o reports/artillery.json

      # JMeter Tests
      - name: Run JMeter Tests
        run: |
          wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xzf apache-jmeter-5.6.2.tgz
          ./apache-jmeter-5.6.2/bin/jmeter -n -t performance/test-plan.jmx -l reports/jmeter.jtl

      # Upload Performance Reports
      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: reports/

  publish:
    name: Publish
    needs: [performance]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up QEMU and Docker Buildx
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build & Push with Metadata
      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=sha

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the Image
      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Sign Container Image
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY \
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

  notify:
    name: Notifications
    needs: [publish]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,workflow,job
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          initial-status: success
