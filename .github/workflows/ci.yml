# .github/workflows/ci.yml
name: DevSecOps - CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'
  DOCKER_REGISTRY: ghcr.io
  VERSION: 1.0.0  # your version
  IMAGE_NAME: ${{ github.repository }}
  TRIVY_VERSION: '0.47.0'
  SONAR_SCANNER_VERSION: '5.0.1.3006'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TRIVY_NO_PROGRESS: true
  TRIVY_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  verify:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true

      - name: Load cached dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with dev

      # Python Code Quality
      - name: Run Black
        run: poetry run black --check src/

      - name: Run isort
        run: poetry run isort --check-only src/

      - name: Run Ruff
        run: poetry run ruff check src/

      - name: Run mypy
        run: poetry run mypy src/

      - name: Run detect-secrets
        run: |
          poetry run detect-secrets scan \
            --baseline .secrets.baseline \
            --exclude-files 'poetry.lock' \
            --exclude-files '.*test.*'

      - name: Run Bandit security scan
        run: |
          # Create reports directory if it doesn't exist
          mkdir -p reports

          # Run bandit security scan on the entire project
          poetry run bandit -r . \
            --format json \
            --exclude './.venv,./tests,./build,./dist' \
            --skip B101,B104 \
            --output reports/bandit.json || true

          # Convert to SARIF format using our script
          poetry run python scripts/bandit_to_sarif.py reports/bandit.json reports/bandit-results.sarif

          # Run safety check for known vulnerabilities
          poetry run safety check --policy-file .safety-policy.yml --output text --full-report > reports/safety-report.txt || true

      - name: Upload security scan reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

      - name: Run detect-secrets
        run: |
          poetry run detect-secrets scan \
            --baseline .secrets.baseline \
            --exclude-files 'poetry.lock' \
            --exclude-files '.*test.*'

  sast:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "python-code-scanning"

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Load cached dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with dev,test

      # - name: Run tests with coverage
      #   run: |
      #     poetry run pytest \
      #       --cov=src \
      #       --cov-report=xml \
      #       --cov-report=html \
      #       --junitxml=junit/test-results.xml
      #   env:
      #     DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      #     REDIS_URL: redis://localhost:6379/0

      # - name: Upload coverage reports
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./coverage.xml
      #     fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pytest-results
          path: |
            junit/test-results.xml
            htmlcov/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  container-security:
    name: Container Security Scan
    needs: [verify, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Install Trivy directly instead of using action
      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      # Cache Trivy DB
      - name: Cache Trivy vulnerability database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-

      # Run Trivy scan with retry logic
      - name: Run Trivy vulnerability scanner
        run: |
          max_retries=3
          attempt=1

          while [ $attempt -le $max_retries ]; do
            echo "Attempt $attempt of $max_retries"

            if trivy image \
              --cache-dir ~/.cache/trivy \
              --format sarif \
              --output trivy-results.sarif \
              --severity HIGH,CRITICAL \
              --vuln-type os,library \
              --ignore-unfixed \
              --timeout 10m \
              ${{ env.IMAGE_NAME }}:test; then
              echo "Trivy scan completed successfully"
              break
            else
              echo "Attempt $attempt failed"
              if [ $attempt -eq $max_retries ]; then
                echo "All retry attempts failed"
                exit 1
              fi
              sleep 30
              attempt=$((attempt + 1))
            fi
          done

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: Trivy

      # Install Dockle directly
      - name: Install Dockle
        run: |
          DOCKLE_VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          wget https://github.com/goodwithtech/dockle/releases/download/v${DOCKLE_VERSION}/dockle_${DOCKLE_VERSION}_Linux-64bit.deb
          sudo dpkg -i dockle_${DOCKLE_VERSION}_Linux-64bit.deb

      # Cache Dockle DB
      - name: Cache Dockle
        uses: actions/cache@v4
        with:
          path: ~/.cache/dockle
          key: ${{ runner.os }}-dockle-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-dockle-

      # Run Dockle scan with retry logic
      - name: Run Dockle
        run: |
          max_retries=3
          attempt=1

          while [ $attempt -le $max_retries ]; do
            echo "Attempt $attempt of $max_retries"

            if dockle \
              --cache-dir ~/.cache/dockle \
              --format sarif \
              --output dockle-results.sarif \
              ${{ env.IMAGE_NAME }}:test; then
              echo "Dockle scan completed successfully"
              break
            else
              echo "Attempt $attempt failed"
              if [ $attempt -eq $max_retries ]; then
                echo "All retry attempts failed"
                exit 1
              fi
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
        continue-on-error: true

      - name: Upload Dockle scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: dockle-results.sarif
          category: Dockle

      # Optional: Print scan summaries
      - name: Print scan summaries
        if: always()
        run: |
          echo "=============== Trivy Scan Summary ==============="
          trivy image --severity HIGH,CRITICAL --vuln-type os,library ${{ env.IMAGE_NAME }}:test

          echo "=============== Dockle Scan Summary ==============="
          dockle ${{ env.IMAGE_NAME }}:test

  publish:
    name: Publish Image
    needs: [verify, test, container-security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build variables
        run: |
          # Get branch name
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH="${{ github.head_ref }}"
          else
            BRANCH=${GITHUB_REF#refs/heads/}
          fi

          # Set branch name
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV

          # Set timestamp
          echo "TIMESTAMP=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch and version (e.g., main_1.0.0)
            type=raw,value=${{ env.BRANCH }}_${{ env.VERSION }}

            # Branch, version and timestamp (e.g., main_1.0.0_202411161234)
            # type=raw,value=${{ env.BRANCH }}_${{ env.VERSION }}_${{ env.TIMESTAMP }}

            # Latest tag for main branch
            # type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

            # Git tags
            # type=ref,event=tag

            # Git short SHA
            # type=sha,format=short
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ env.VERSION }}
            BUILD_TIMESTAMP=${{ env.TIMESTAMP }}
            BUILD_SHA=${{ github.sha }}

      - name: Verify image tags
        if: github.event_name != 'pull_request'
        run: |
          echo "============= Image Tags ============="
          echo "${{ steps.meta.outputs.tags }}" | tr '\n' '\0' | xargs -0 -n1 echo "  -"

          echo "============= Pull Test ============="
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH }}_${{ env.VERSION }}

          echo "============= Image Details ============="
          docker inspect ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH }}_${{ env.VERSION }} | jq '.[0].Config.Labels'

      - name: Sign the published Docker image
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ${DOCKER_REGISTRY}/${{ env.IMAGE_NAME }}@${{ steps.meta.outputs.digest }}

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    # Run after publish job to ensure we don't delete images we just created
    needs: [publish]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      packages: write

    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: false
          token: ${{ secrets.GITHUB_TOKEN }}
          age: '3'

  # deploy:
  #   name: Deploy to EC2
  #   needs: [publish]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

  #   environment:
  #     name: production
  #     url: https://your-app-url.com

  #   steps:
  #     - name: Start deployment notification
  #       uses: slackapi/slack-github-action@v1.25.0
  #       with:
  #         channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
  #         payload: |
  #           {
  #             "text": "🚀 Starting deployment of ${{ github.repository }} to Production",
  #             "blocks": [
  #               {
  #                 "type": "header",
  #                 "text": {
  #                   "type": "plain_text",
  #                   "text": "🚀 Deployment Started",
  #                   "emoji": true
  #                 }
  #               },
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Repository:*\n${{ github.repository }}"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Environment:*\nProduction"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Branch:*\n${{ github.ref_name }}"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Version:*\n${{ env.VERSION }}"
  #                   }
  #                 ]
  #               },
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Triggered by:*\n${{ github.actor }}"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Commit:*\n${{ github.sha }}"
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  #     - name: Deploy to EC2
  #       id: deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           # Set versioned tag
  #           DOCKER_TAG="${{ env.BRANCH }}_${{ env.VERSION }}"

  #           # Ensure we're in the home directory
  #           cd ~

  #           # Check if directory exists and handle git repository
  #           if [ ! -d "app-source" ]; then
  #             echo "Cloning repository..."
  #             git clone https://github.com/lethanhson9901/app-source.git
  #           fi

  #           # Change to repository directory
  #           cd app-source
  #           cp .env.example .env

  #           # Store current commit hash
  #           OLD_COMMIT=$(git rev-parse HEAD)

  #           # Fetch latest changes
  #           git pull

  #           # Get the latest commit hash from main
  #           LATEST_COMMIT=$(git rev-parse origin/main)

  #           # If there are changes, reset to latest main
  #           if [ "$OLD_COMMIT" != "$LATEST_COMMIT" ]; then
  #             echo "Updates found, applying changes..."
  #             git reset --hard origin/main
  #           else
  #             echo "Already at latest version"
  #           fi

  #           # Login to GitHub Container Registry
  #           echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

  #           # Update the image tag in docker-compose.yml without modifying other settings
  #           # sed -i "s|image:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${DOCKER_TAG}|" docker-compose.yml

  #           # Stop existing containers
  #           docker compose down

  #           # Remove existing images to force new pull
  #           # docker compose pull --ignore-pull-failures
  #           # docker image rm $(docker compose config | grep 'image: ' | awk '{print $2}') || true

  #           # Deploy with docker-compose using explicit version tag
  #           docker compose up -d

  #           # Clean up
  #           # docker system prune -af --volumes

  #           # Wait for health check
  #           timeout 30 bash -c 'while ! curl -s http://localhost:8080/health/live; do sleep 5; done'

  #           # Verify deployment
  #           # docker compose ps
  #           # docker compose logs --tail=50 app

  #           # Print deployed version and git info for verification
  #           echo "Deployed version: ${DOCKER_TAG}"
  #           echo "Git commit: $(git rev-parse HEAD)"

  #     - name: Notify deployment success
  #       if: success()
  #       uses: slackapi/slack-github-action@v1.25.0
  #       with:
  #         channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
  #         payload: |
  #           {
  #             "text": "✅ Successfully deployed ${{ github.repository }} to Production",
  #             "blocks": [
  #               {
  #                 "type": "header",
  #                 "text": {
  #                   "type": "plain_text",
  #                   "text": "✅ Deployment Successful",
  #                   "emoji": true
  #                 }
  #               },
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Repository:*\n${{ github.repository }}"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Environment:*\nProduction"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Version:*\n${{ env.VERSION }}"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Deployed by:*\n${{ github.actor }}"
  #                   }
  #                 ]
  #               },
  #               {
  #                 "type": "section",
  #                 "text": {
  #                   "type": "mrkdwn",
  #                   "text": "*Status:* Successfully deployed to production\n*Deployment URL:* http://ec2-18-142-237-255.ap-southeast-1.compute.amazonaws.com"
  #                 }
  #               },
  #               {
  #                 "type": "context",
  #                 "elements": [
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "View deployment details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  #     - name: Notify deployment failure
  #       if: failure()
  #       uses: slackapi/slack-github-action@v1.25.0
  #       with:
  #         channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
  #         payload: |
  #           {
  #             "text": "❌ Failed to deploy ${{ github.repository }} to Production",
  #             "blocks": [
  #               {
  #                 "type": "header",
  #                 "text": {
  #                   "type": "plain_text",
  #                   "text": "❌ Deployment Failed",
  #                   "emoji": true
  #                 }
  #               },
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Repository:*\n${{ github.repository }}"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Environment:*\nProduction"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Version:*\n${{ env.VERSION }}"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Attempted by:*\n${{ github.actor }}"
  #                   }
  #                 ]
  #               },
  #               {
  #                 "type": "section",
  #                 "text": {
  #                   "type": "mrkdwn",
  #                   "text": "*Error:* Deployment to production failed. Please check the logs for details."
  #                 }
  #               },
  #               {
  #                 "type": "context",
  #                 "elements": [
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "View error details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
